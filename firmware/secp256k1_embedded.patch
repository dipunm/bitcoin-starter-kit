diff --git a/mpy/libsecp256k1.c b/mpy/libsecp256k1.c
index d35d410..2a8d09b 100644
--- a/mpy/libsecp256k1.c
+++ b/mpy/libsecp256k1.c
@@ -30,6 +30,9 @@ void maybe_init_ctx(){
     if(ctx != NULL){
         return;
     }
+
+    mp_print_t print = mp_obj_print(0, mp_const_false);
+    mp_print_str(&print, "hello world");
     // ctx = secp256k1_context_create(SECP256K1_CONTEXT_VERIFY | SECP256K1_CONTEXT_SIGN);
     ctx = secp256k1_context_preallocated_create((void *)preallocated_ctx, SECP256K1_CONTEXT_VERIFY | SECP256K1_CONTEXT_SIGN);
 }
@@ -452,6 +455,7 @@ STATIC MP_DEFINE_CONST_FUN_OBJ_VAR(usecp256k1_ecdsa_sign_obj, 2, usecp256k1_ecds
 // verify secret key
 STATIC mp_obj_t usecp256k1_ec_seckey_verify(const mp_obj_t arg){
     maybe_init_ctx();
+    return mp_const_none;
     mp_buffer_info_t buf;
     mp_get_buffer_raise(arg, &buf, MP_BUFFER_READ);
     if(buf.len != 32){
@@ -562,9 +566,9 @@ STATIC mp_obj_t usecp256k1_ec_privkey_add(mp_obj_t privarg, const mp_obj_t tweak
 
     vstr_t priv2;
     vstr_init_len(&priv2, 32);
-    memcpy((byte*)priv2.buf, privbuf.buf, 32);
+    memcpy((unsigned char*)priv2.buf, privbuf.buf, 32);
 
-    int res = secp256k1_ec_privkey_tweak_add(ctx, priv2.buf, tweakbuf.buf);
+    int res = secp256k1_ec_privkey_tweak_add(ctx, (unsigned char*)priv2.buf, tweakbuf.buf);
     if(!res){ // never happens according to the API
         mp_raise_ValueError("Failed to tweak the private key");
         return mp_const_none;
@@ -990,4 +994,6 @@ const mp_obj_module_t secp256k1_user_cmodule = {
 };
 
 // Register the module to make it available in Python
-MP_REGISTER_MODULE(MP_QSTR_secp256k1, secp256k1_user_cmodule, MODULE_SECP256K1_ENABLED);
+#if MODULE_SECP256K1_ENABLED
+MP_REGISTER_MODULE(MP_QSTR_secp256k1, secp256k1_user_cmodule);
+#endif
\ No newline at end of file
diff --git a/secp256k1 b/secp256k1
--- a/secp256k1
+++ b/secp256k1
@@ -1 +1 @@
-Subproject commit be8d9c262f46309d9b4165b0498b71d704aba8fe
+Subproject commit be8d9c262f46309d9b4165b0498b71d704aba8fe-dirty
