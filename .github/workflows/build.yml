name: Build Firmware

on:
  push:
    branches: main
  
jobs:
  build:

    runs-on: ubuntu-20.04
    env:
      BOARD_TYPE: PIMORONI_BADGER2040
      PIMORONI_PICO_PATH: $GITHUB_WORKSPACE/pimoroni-pico
    
    steps:

    - name: Set GITHUB_WORKSPACE
      shell: bash
      run: |
        echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    - name: Checkout source
      uses: actions/checkout@v2
      with:
        path: project

    - name: Import environment variables from a file
      id: import-env
      shell: bash
      run: |
        while read line; do
          echo "$line" >> $GITHUB_ENV
        done < "${{env.GITHUB_WORKSPACE}}/project/firmware/dependencies.env"

    - name: Workspace Cache Micropython
      id: cache-micropython-src
      uses: actions/cache@v3
      with:
        path: |
          ${{env.GITHUB_WORKSPACE}}/micropython
          ${{env.GITHUB_WORKSPACE}}/pimoroni-pico
        key: workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.PIMORONI_VERSION}}
        restore-keys: |
          workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.PIMORONI_VERSION}}

    - name: Embit Cache
      id: cache-embit-src
      uses: actions/cache@v3
      with:
        path: ${{env.GITHUB_WORKSPACE}}/project/firmware/embit
        key: embit-${{env.EMBIT_VERSION}}
        restore-keys: embit-${{env.EMBIT_VERSION}}

    - name: Compiler Cache
      uses: actions/cache@v3
      with:
        path: /home/runner/.ccache
        key: ccache-compiler-${{github.ref}}-${{github.sha}}
        restore-keys: |
          ccache-micropython-badger2040-${{github.ref}}
          ccache-micropython-badger2040-
    
    - name: Checkout Pimoroni Pico
      if: steps.cache-micropython-src.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: pimoroni/pimoroni-pico
        ref: ${{env.PIMORONI_VERSION}}
        path: pimoroni-pico
        submodules: true


    - name: Checkout Micropython
      if: steps.cache-micropython-src.outputs.cache-hit != 'true'
      uses: actions/checkout@v2
      with:
        repository: micropython/micropython
        ref: ${{env.MICROPYTHON_VERSION}}
        path: micropython
        submodules: false

    - name: Fetch base MicroPython submodules
      if: steps.cache-micropython-src.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython
      run: git submodule update --init

    - name: Fetch Pico SDK submodules
      if: steps.cache-micropython-src.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython/lib/pico-sdk
      run: git submodule update --init
      
    - name: Build mpy-cross
      if: steps.cache-micropython-src.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython/mpy-cross
      run: make
      
    - name: "HACK: MicroPython Board Fixups"
      if: steps.cache-micropython-src.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        ${{env.PIMORONI_PICO_PATH}}/micropython/_board/board-fixup.sh badger2040 ${{env.BOARD_TYPE}} ${{env.PIMORONI_PICO_PATH}}/micropython/_board      
      

    - name: Checkout secp256k1
      uses: actions/checkout@v2
      with:
        repository: kdmukai/secp256k1-embedded
        ref: ${{env.SECP256K1_EMBEDDED_VERSION}}
        path: secp256k1-embedded
        submodules: 'recursive'

    - name: Patch files secp256k1
      shell: bash
      working-directory: secp256k1-embedded/secp256k1
      run: |
        git apply ../../project/firmware/secp256k1.patch

    - name: Patch files secp256k1-embedded
      shell: bash
      working-directory: secp256k1-embedded
      run: |
        git apply ../project/firmware/secp256k1_embedded.patch

    - name: Download Embit
      if: steps.cache-embit-src.outputs.cache-hit != 'true'
      shell: bash
      working-directory: project/firmware/src
      run: |
        wget -qO- https://github.com/diybitcoinhardware/embit/archive/refs/tags/v${{env.EMBIT_VERSION}}.tar.gz | tar -xz --strip-components=2 -C . embit-${{env.EMBIT_VERSION}}/src/embit

    - name: Install Compiler & CCache
      run: |
        sudo apt update && sudo apt install ccache gcc-arm-none-eabi
        python3 -m pip install pillow
    
    - name: Configure MicroPython Build
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        cmake --debug-output --trace -Wdev -S . -B build-${{env.BOARD_TYPE}}-without-badger-os -DSECP256K1_PATH=$GITHUB_WORKSPACE/secp256k1-embedded -DFIRMWARE_DIR=$GITHUB_WORKSPACE/project/firmware -DPIMORONI_PICO_PATH=${{env.PIMORONI_PICO_PATH}} -DPICO_BUILD_DOCS=0 -DUSER_C_MODULES=$GITHUB_WORKSPACE/project/firmware/firmware.cmake -DMICROPY_BOARD=${{env.BOARD_TYPE}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build MicroPython
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        ccache --zero-stats || true
        cmake --build build-${{env.BOARD_TYPE}}-without-badger-os -j 2 -v
        ccache --show-stats || true
        
    - name: Store .uf2 as artifact
      uses: actions/upload-artifact@v2
      with:
        name: firmware.uf2
        path: micropython/ports/rp2/build-${{env.BOARD_TYPE}}-without-badger-os/firmware.uf2
